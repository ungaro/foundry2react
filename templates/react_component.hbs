import React, { useState, useEffect } from 'react';
import {
  createPublicClient,
  createWalletClient,
  http,
  parseAbi,
  getContract,
} from "viem";
import { anvil } from "viem/chains";
import { privateKeyToAccount } from "viem/accounts";

const {{contractName}}TestComponent = () => {
  const [publicClient, setPublicClient] = useState(null);
  const [walletClient, setWalletClient] = useState(null);
  const [contract, setContract] = useState(null);
  {{#each stateVariables}}
  const [{{this.name}}, set{{capitalize this.name}}] = useState(null);
  {{/each}}

  useEffect(() => {
    const setup = async () => {
      const account = privateKeyToAccount(import.meta.env.PRIVATE_KEY);
      {{#each stateVariables}}
      const {{this.name}}Account = privateKeyToAccount(import.meta.env.{{uppercase this.name}}_PRIVATE_KEY);
      {{/each}}

      const publicClient = createPublicClient({
        chain: anvil,
        transport: http(import.meta.env.RPC_URL),
      });

      const walletClient = createWalletClient({
        account,
        chain: anvil,
        transport: http(import.meta.env.RPC_URL),
      });

      setPublicClient(publicClient);
      setWalletClient(walletClient);
      {{#each stateVariables}}
      set{{capitalize this.name}}({{this.name}}Account);
      {{/each}}

      const contractABI = parseAbi([
        {{#each contractFunctions}}
        "{{this}}",
        {{/each}}
      ]);

      const contract = getContract({
        address: import.meta.env.CONTRACT_ADDRESS,
        abi: contractABI,
        publicClient,
        walletClient,
      });

      setContract(contract);

      {{#if setupFunction}}
      {{#each setupFunction.steps}}
      {{#if (eq this.type "FunctionCall")}}
      await contract.write.{{this.function}}([{{#each this.arguments}}{{parseArg this}}{{#unless @last}}, {{/unless}}{{/each}}]);
      {{/if}}
      {{/each}}
      {{/if}}
    };

    setup();
  }, []);


{{#each testFunctions}}
const {{this.name}} = async () => {
  try {
    {{#each this.steps}}
      {{#if (eq this.type "FunctionCall")}}
        {{#if (eq this.contract "vm")}}
    // VM operation: {{this.function}}({{#each this.arguments}}{{parseArg this}}{{#unless @last}}, {{/unless}}{{/each}})
        {{else}}
    await contract.write.{{this.function}}([{{#each this.arguments}}{{parseArg this}}{{#unless @last}}, {{/unless}}{{/each}}]);
        {{/if}}
      {{else if (eq this.type "Assertion")}}
 {{
#if
 (eq this.assert_type "assertEq")}}
    const result = await {{parseFunctionCall this.arguments.[0]}};
    console.assert(result === {{parseArg this.arguments.[1]}}, '{{this.assert_type}} failed: {{parseFunctionCall this.arguments.[0]}} !== {{parseArg this.arguments.[1]}}');
        {{else}}
    console.assert(await {{parseFunctionCall this.arguments.[0]}}, '{{this.assert_type}} failed');
        {{
/if
}}
     {{/if}}
    {{/each}}
    console.log('{{this.name}} passed');
  } catch (error) {
    console.error('{{this.name}} failed:', error);
  }
};

{{/each}}

  return (
    <div>
      <h1>{{contractName}} Tests</h1>
  {{
#each
 testFunctions}}
  <button onClick={{raw this.name}}>Run {{this.name}}</button>
  {{
/each
}}
    </div>
  );
};

export default {{contractName}}TestComponent;