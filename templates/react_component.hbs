import React, { useState } from 'react';
import {
  createPublicClient,
  createWalletClient,
  http,
  webSocket,
  keccak256,
  bytesToHex,
  parseAbi,
  TransactionExecutionError,
  type GetBlockNumberErrorType,
  BaseError,
  ContractFunctionRevertedError,
} from "viem";
import { anvil } from "viem/chains";
import { privateKeyToAccount } from "viem/accounts";
import * as dotenv from "dotenv";

dotenv.config();




const {{contractName}}TestComponent = () => {



// Client setup
const account = privateKeyToAccount(process.env.PRIVATE_KEY as `0x${string}`);

const publicClient = createPublicClient({
  chain: anvil,
  transport: webSocket(process.env.RPC_URL, {
    reconnect: true,
    retryCount: 100,
  }),
});

const walletClient = createWalletClient({
  account,
  chain: anvil,
  transport: webSocket(process.env.RPC_URL, {
    reconnect: true,
    retryCount: 100,
  }),
});




  const [provider, setProvider] = useState(null);
  const [signer, setSigner] = useState(null);
  const [contract, setContract] = useState(null);
  {{#each stateVariables}}
  const [{{this.name}}State, set{{capitalize this.name}}State] = useState(null);
  {{/each}}

  const setup = async () => {
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    await provider.send('eth_requestAccounts', []);
    const signer = provider.getSigner();
    const contractAddress = 'YOUR_CONTRACT_ADDRESS';
    const contractABI = 'YOUR_CONTRACT_ABI';
    const contract = new ethers.Contract(contractAddress, contractABI, signer);
    setProvider(provider);
    setSigner(signer);
    setContract(contract);
    {{#if setupFunction}}
    {{#each setupFunction.steps}}
    {{#if (eq this.type "FunctionCall")}}
    await contract['{{this.function}}']({{#each this.arguments}}{{parseArg this}}{{#unless @last}}, {{/unless}}{{/each}});
    {{/if}}
    {{/each}}
    {{/if}}
  };

  {{#each testFunctions}}
  const {{this.name}} = async () => {
    try {
      {{#each this.steps}}
      {{#if (eq this.type "FunctionCall")}}
      await contract['{{this.function}}']({{#each this.arguments}}{{parseArg this}}{{#unless @last}}, {{/unless}}{{/each}});
      {{else if (eq this.type "Assertion")}}
      console.assert({{parseAssertion this.arguments}}, '{{this.assert_type}}');
      {{else if (eq this.type "VMPrank")}}
      // Set signer to {{this}}
      {{else if (eq this.type "VMStartPrank")}}
      // Start pranking as {{this}}
      {{else if (eq this.type "VMStopPrank")}}
      // Stop pranking
      {{/if}}
      {{/each}}
      console.log('{{this.name}} passed');
    } catch (error) {
      console.error('{{this.name}} failed:', error);
    }
  };

  {{/each}}

  return (
    <div>
      <h1>{{contractName}} Tests</h1>
      <button onClick={setup}>Setup</button>
      {{#each testFunctions}}
      <button onClick={{this.name}}>Run {{this.name}}</button>
      {{/each}}
    </div>
  );
};

export default {{contractName}}TestComponent;